var c = document.getElementById("canvas");
var ctx = c.getContext("2d");
var co = document.getElementById("overlaycanvas");
var ctxo = co.getContext("2d");
var cf = document.getElementById("foodcanvas");
var ctxf = cf.getContext("2d");
ctx.fillStyle = "#FF0000";

var foodQuantity = 50;
var colonyFood = 20;
var ph = 100;
var antCount = 18;
var toolMode = 'ant';
var paused = false;
var trailStrength = 0.0008;
var CANVAS_WIDTH = 1200;
var CANVAS_HEIGHT = 700;
var mousePos = 
{
	x: 400,
	y: 400
};

var h1 = document.getElementById('timer'),
    seconds = 0, minutes = 0, hours = 0,
    t;

function add() {
    seconds++;
    if (seconds >= 60) {
        seconds = 0;
        minutes++;
        if (minutes >= 60) {
            minutes = 0;
            hours++;
        }
    }
    
    h1.textContent = (hours ? (hours > 9 ? hours : "0" + hours) : "00") + ":" + (minutes ? (minutes > 9 ? minutes : "0" + minutes) : "00") + ":" + (seconds > 9 ? seconds : "0" + seconds);

    timer();
}

function timer() {
    if(ants.length > 0)
    	t = setTimeout(add, 1000);
}


var ant = function() {
	var dir = Math.floor((Math.random() * 8) + 1);
	var delay = Math.floor((Math.random() * 1500));
	return {
		dir: dir,
		delay: delay,
		speed: 0,
		hasFood: false,
		x: c.width/2,
		y: c.height/2,
		width: 3,
		height: 3,
		energy: 10000,
		fright: 0,
		eating: 0,
		l: {x: 0, y: 0},
		c: {x: 0, y: 0},
		r: {x: 0, y: 0},
		dizzy: 0,
		turn: function(dir) {

		}
	};
};

var ants = [];
for (var i = 0; i < antCount; i++) {
	ants.push(new ant());
}
timer();

$('#ants').html(antCount);
$('#ph').html(ph);

function generateFood() {
	ctxf.fillStyle = "#00bb00";
	for(var i = 0; i < foodQuantity; i++) {
		ctxf.beginPath();
		ctxf.arc(Math.floor((Math.random() * CANVAS_WIDTH) + 1), Math.floor((Math.random() * CANVAS_HEIGHT) + 1), 4, 0, 2 * Math.PI, false);
      ctxf.fill();
	}	
}

generateFood();

function getMousePos(canvas, evt) {
  var rect = canvas.getBoundingClientRect();
  return {
    x: evt.clientX - rect.left,
    y: evt.clientY - rect.top
  };
}

var layingTrail = false;

//var deadImageObj = new Image();

//deadImageObj.src = 'http://www.html5canvastutorials.com/demos/assets/darth-vader.jpg';

cf.addEventListener('mousemove', function(evt) {
  mousePos = getMousePos(c, evt);
  if(layingTrail && ph > 0) {
  		ctx.fillStyle = "rgba(255,0,0,0.04)";
		ctx.fillRect(mousePos.x-3,mousePos.y-3,3,3);
		ph --;
		$('#ph').html(ph);
  }  
}, false);

var antButton = document.getElementById('antButton');
antButton.addEventListener('click', function(evt) {
	$('.toolbar button').each(function() {
		$(this).removeClass('active')
	})
	$(evt.target).addClass('active');
	toolMode = 'ant';
	console.log(toolMode)
})

var pauseButton = document.getElementById('pauseButton');
pauseButton.addEventListener('click', function(evt) {
	paused = !paused;
	console.log(paused)
})

var playButton = document.getElementById('stepButton');
playButton.addEventListener('click', function(evt) {
	test(1);
})

var foodButton = document.getElementById('foodButton');
foodButton.addEventListener('click', function(evt) {
	
	$('.toolbar button').each(function() {
		$(this).removeClass('active')
	})
	$(evt.target).addClass('active');
	toolMode = 'food';
	console.log(toolMode)
})

var trailButton = document.getElementById('trailButton');
trailButton.addEventListener('click', function(evt) {
	$('.toolbar button').each(function() {
		$(this).removeClass('active')
	})
	$(evt.target).addClass('active');
	toolMode = 'trail';
	console.log(toolMode)
})

cf.addEventListener('mousedown', function(evt){
	if (toolMode == 'trail') 
		layingTrail = true;
})

cf.addEventListener('mouseup', function(evt){
	if (toolMode == 'trail') 
		layingTrail = false;
})

cf.addEventListener('click', function(evt) {
	if( toolMode == 'ant') {
		if(colonyFood >=4) {
			var baby = new ant();
			baby.x = Math.floor(mousePos.x);
			baby.y = Math.floor(mousePos.y);
			baby.delay = 0;
			colonyFood -= 3;
			ants.push(baby);
			$('#ants').html(ants.length);
		}
	}else if (toolMode == 'food'){
		ctxf.fillStyle = "#00bb00";
		ctxf.beginPath();
		console.log(mousePos.x, mousePos.y);
		ctxf.arc(Math.floor(mousePos.x), Math.floor(mousePos.y), 4, 0, 2 * Math.PI, false);
      ctxf.fill();
	}
}, false);

// Example: http://www.lucaongaro.eu/blog/2012/12/02/easy-two-way-data-binding-in-javascript/

/*function DataBinder( object_id ) {
  // Use a jQuery object as simple PubSub
  var pubSub = jQuery({});

  // We expect a `data` element specifying the binding
  // in the form: data-bind-<object_id>="<property_name>"
  var data_attr = "bind-" + object_id,
      message = object_id + ":change";

  // Listen to change events on elements with the data-binding attribute and proxy
  // them to the PubSub, so that the change is "broadcasted" to all connected objects
  jQuery( document ).on( "change", "[data-" + data_attr + "]", function( evt ) {
    var $input = jQuery( this );

    pubSub.trigger( message, [ $input.data( data_attr ), $input.val() ] );
  });

  // PubSub propagates changes to all bound elements, setting value of
  // input tags or HTML content of other tags
  pubSub.on( message, function( evt, prop_name, new_val ) {
    jQuery( "[data-" + data_attr + "=" + prop_name + "]" ).each( function() {
      var $bound = jQuery( this );

      if ( $bound.is("input, textarea, select") ) {
        $bound.val( new_val );
      } else {
        $bound.html( new_val );
      }
    });
  });

  return pubSub;
}
*/

function lineDistance( point1, point2 )
{
  var xs = 0;
  var ys = 0;
 
  xs = point2.x - point1.x;
  xs = xs * xs;
 
  ys = point2.y - point1.y;
  ys = ys * ys;
 
  return Math.sqrt( xs + ys );
}

function setSenses(a) {
	switch(a.dir) {
		case 1:
			a.l = {x: a.x - 1, y: a.y - 3};
			a.cl = {x: a.x, y: a.y - 2};
			a.c = {x: a.x + 1, y: a.y - 2};
			a.cr = {x: a.x + 2, y: a.y - 2};
			a.r = {x: a.x + 3, y: a.y - 3};
			break;
		case 2:
			a.l = {x: a.x + 2, y: a.y - 3};
			a.cl = {x: a.x + 2, y: a.y - 2};
			a.c = {x: a.x + 3, y: a.y - 1};
			a.cr = {x: a.x + 4, y: a.y};
			a.r = {x: a.x + 5, y: a.y};
			break;
		case 3:
			a.l = {x: a.x + 5, y: a.y - 1};
			a.cl = {x: a.x + 4, y: a.y};
			a.c = {x: a.x + 4, y: a.y + 1};
			a.cr = {x: a.x + 4, y: a.y + 2};
			a.r = {x: a.x + 5, y: a.y + 3};
			break;
		case 4:
			a.l = {x: a.x + 5, y: a.y + 2};
			a.cl = {x: a.x + 5, y: a.y + 3};
			a.c = {x: a.x + 4, y: a.y + 4};
			a.cr = {x: a.x + 3, y: a.y + 5};
			a.r = {x: a.x + 2, y: a.y + 5};
			break;
		case 5:
			a.l = {x: a.x + 3, y: a.y + 5};
			a.cl = {x: a.x + 2, y: a.y + 4};
			a.c = {x: a.x + 1, y: a.y + 4};
			a.cr = {x: a.x, y: a.y + 4};
			a.r = {x: a.x - 1, y: a.y + 5};
			break;
		case 6:
			a.l = {x: a.x, y: a.y + 5};
			a.cl = {x: a.x, y: a.y + 4};
			a.c = {x: a.x - 1, y: a.y + 3};
			a.cr = {x: a.x - 2, y: a.y + 2};
			a.r = {x: a.x - 3, y: a.y + 2};
			break;
		case 7:
			a.l = {x: a.x - 3, y: a.y + 3};
			a.cl = {x: a.x - 2, y: a.y + 2};
			a.c = {x: a.x - 2, y: a.y + 1};
			a.cr = {x: a.x - 2, y: a.y};
			a.r = {x: a.x - 3, y: a.y - 1};
			break;
		case 8:
			a.l = {x: a.x - 3, y: a.y};
			a.cl = {x: a.x - 2, y: a.y};
			a.c = {x: a.x - 1, y: a.y - 1};
			a.cr = {x: a.x, y: a.y - 2};
			a.r = {x: a.x, y: a.y - 3};
	}
}

var fade = 0;
var time;

$('#hill').hide()
$('#hill').fadeIn('slow', function() {
	test();
});
function test(skip) {
if(skip == 1 || !paused){
	var now = new Date().getTime(),
        dt = now - (time || now);
 
    time = now;

	ctxo.clearRect ( 0 , 0 , co.width, co.height );
	var numAnts = ants.length;
	var foodData = ctxf.getImageData(0, 0, c.width, c.height).data;
	var pData = ctx.getImageData(0,0,c.width, c.height).data;
	document.getElementById('debug').innerHTML = '';
	for(var ant = 0; ant < numAnts; ant++) {
		if(ants[ant]) {
			if(ants[ant].eating > 0) {
				ants[ant].eating --;
				if(ants[ant].eating === 0) {
					ants[ant].dir += 4;
						if (ants[ant].dir > 8)
							ants[ant].dir -= 8;
				}
			}
			setSenses(ants[ant]);
			if (ants[ant].fright < 0 && lineDistance( ants[ant], mousePos ) < 15) {
				ants[ant].dir = Math.floor(Math.random() * 8) + 1;
				ants[ant].fright = 10;
			}
			ants[ant].fright--;
			ants[ant].energy--;
			if(ants[ant].energy < 1) {
				if(ants[ant].hasFood) {
					ants[ant].energy += 1000;
					ants[ant].hasFood = false;
				}
				var deadSprite = $('<img class="deadhead" src="./img/dead.png">')
				$("#game").append(deadSprite)
				deadSprite.css('top', ants[ant].y-4);
				deadSprite.css('left', ants[ant].x-4);
				deadSprite.animate({queue: false, top: ants[ant].y - 20 + 'px'}, 1300).fadeOut(800);
				ants.splice(ant, 1);
				console.log('ant died');
				document.getElementById('ants').innerHTML = ants.length;
				continue;
			}
			
				ants[ant].delay --;
			if(ants[ant].delay < 1) {
				var dirChange = 0;
				
				
				ctxo.fillStyle = "#000000";
				ctxo.fillRect(ants[ant].x, ants[ant].y,3,3);
				ctxo.fillRect(ants[ant].l.x, ants[ant].l.y,1,1);
				ctxo.fillRect(ants[ant].r.x, ants[ant].r.y,1,1);
				ctxo.strokeStyle = "#0d39f5";
				ctxo.beginPath();
				ctxo.moveTo(ants[ant].x - 2 , ants[ant].y - 5);
				ctxo.lineTo(ants[ant].x + (5 * ants[ant].energy/10000), ants[ant].y - 5);
				ctxo.stroke();
				if(ants[ant].hasFood) {
						ctxo.fillStyle = "#00aa00";
						ctxo.fillRect(ants[ant].x, ants[ant].y,3,3);
					}
				if(ants[ant].eating === 0) {
					if(ants[ant].l.x < c.width && ants[ant].l.x > 0 && ants[ant].l.y < c.height && ants[ant].l.y > 0) {
						var pl = pData[((ants[ant].l.y * (1200 * 4)) + (ants[ant].l.x * 4)) + 3];
						var fl = foodData[((ants[ant].l.y * (1200 * 4)) + (ants[ant].l.x * 4)) + 3];
					} else {
						var pl = 0;
						var fl = 0;
					}
					if(ants[ant].r.x > 0 && ants[ant].r.x < 1200 && ants[ant].r.y < c.height && ants[ant].r.y > 0) {
						var pr = pData[((ants[ant].r.y * (1200 * 4)) + (ants[ant].r.x * 4)) + 3];;
						var fr = foodData[((ants[ant].r.y * (1200 * 4)) + (ants[ant].r.x * 4)) + 3];
					} else {
						var pr = 0;
						var fr = 0;
					}
					if(ants[ant].c.x > 0 && ants[ant].c.x < 1200 && ants[ant].c.y < c.height && ants[ant].c.y > 0) {
						var pc = pData[((ants[ant].c.y * (1200 * 4)) + (ants[ant].c.x * 4)) + 3];
						var food = foodData[((ants[ant].c.y * (1200 * 4)) + (ants[ant].c.x * 4)) + 3];
					} else {
						var pc = 0;
						var food = 0;
					}
					if(ants[ant].cr.x > 0 && ants[ant].cr.x < 1200 && ants[ant].cr.y < c.height && ants[ant].cr.y > 0) {
						var foodR = foodData[((ants[ant].cr.y * (1200 * 4)) + (ants[ant].cr.x * 4)) + 3];
					} else {
						var foodR = 0;
					}
					if(ants[ant].cl.x > 0 && ants[ant].cl.x < 1200 && ants[ant].cl.y < c.height && ants[ant].cl.y > 0) {
						var foodL = foodData[((ants[ant].cl.y * (1200 * 4)) + (ants[ant].cl.x * 4)) + 3];
					} else {
						var foodL = 0;
					}
					
					if((food > 0  || foodR > 0 || foodL > 0) && (!ants[ant].hasFood || ants[ant].energy < 8000)) {
						console.log('found food ' + ants[ant].hasFood);
						ants[ant].energy += 1000;
						if(ants[ant].energy > 10000)
							ants[ant].energy = 10000;
						ants[ant].speed = 0;
						ants[ant].eating = 50;
						ants[ant].hasFood = true;
						if(food > 0) {
							ctxf.clearRect ( ants[ant].c.x , ants[ant].c.y , 1, 1 );
						} else if (foodR > 0) { 
							ctxf.clearRect ( ants[ant].cr.x , ants[ant].cr.y , 1, 1 );
						} else if (foodL > 0) {
							ctxf.clearRect ( ants[ant].cl.x , ants[ant].cl.y , 1, 1 );
						}
					} else if ((food > 0  || foodR > 0 || foodL > 0) && ants[ant].energy > 9000 && ants[ant].hasFood) {
						console.log('found food did not eat ' + ants[ant].hasFood)
						ants[ant].speed = 0;
						ants[ant].eating = 20;
					}
					
					
					if((fl > 0 || pl > 2) && pl > pr && pl > pc) {
						dirChange = 2;
					} else if ((fr > 0 || pr > 2) && pl < pr && pr > pc) {
						dirChange = 3;
					}  else if (pc > 6) {
						dirChange = (Math.random() * 100 + 1) < 3 ? (Math.floor(Math.random() * 3) + 1) : 1;
					} else {
						dirChange = (Math.random() * 100 + 1) < 14 ? (Math.floor(Math.random() * 3) + 1) : 0;
					}
					//var dirChange = (Math.floor(Math.random() * 10) + 1) < 2 ? (Math.floor(Math.random() * 3) + 1) : 0;
					//left turn
					if (dirChange == 2 && ants[ant].dizzy > -5) {
						ants[ant].dir --;
						ants[ant].dizzy --;
						if (ants[ant].dir < 1)
							ants[ant].dir = 8;
					}
					//right turn
					if (dirChange == 3 && ants[ant].dizzy < 5) {
						ants[ant].dir ++;
						ants[ant].dizzy ++;
						if (ants[ant].dir > 8)
							ants[ant].dir = 1;
					}
					if(ants[ant].eating === 0)
						ants[ant].speed = 1;
					
					switch(ants[ant].dir) {
						case 1:
							if( ants[ant].y > ants[ant].speed) {
								ants[ant].y -= ants[ant].speed;
							} else {
								ants[ant].dir = (Math.floor(Math.random() * 2)) === 0 ? 8 : 2;
							}
							if(ants[ant].x >= c.width - ants[ant].width - ants[ant].speed) {
								ants[ant].dir = (Math.random() * 100 + 1) < 11 ? 8 : 1;
							} else if (ants[ant].x === 1) {
								ants[ant].dir = (Math.random() * 100 + 1) < 11 ? 2 : 1;
							}
							break;
						case 2:
							if ( ants[ant].x < c.width - ants[ant].width - ants[ant].speed)
								ants[ant].x += ants[ant].speed;
							else {
								ants[ant].dir = 1;
							}
							if( ants[ant].y > ants[ant].speed) {
								ants[ant].y -= ants[ant].speed;
							} else {
								ants[ant].dir = 3;
							}
							if(ants[ant].x >= c.width - ants[ant].width - ants[ant].speed && ants[ant].y <= ants[ant].speed) {
								ants[ant].dir = 6;
							}
							break;
						case 3:
							if ( ants[ant].x < c.width - ants[ant].width - ants[ant].speed) {
								ants[ant].x += ants[ant].speed;
							} else {
								ants[ant].dir = (Math.floor(Math.random() * 2)) === 0 ? 2 : 4;
							}
							if(ants[ant].y >= c.height - ants[ant].height - ants[ant].speed) {
								ants[ant].dir = (Math.random() * 100 + 1) < 11 ? 2 : 3;
							} else if (ants[ant].y === 1) {
								ants[ant].dir = (Math.random() * 100 + 1) < 11 ? 4 : 3;
							}
							break;
						case 4:
							if ( ants[ant].y < c.height - ants[ant].height - ants[ant].speed) {
								ants[ant].y += ants[ant].speed;
							} else {
								ants[ant].dir = 3;
							}
							if ( ants[ant].x < c.width - ants[ant].width - ants[ant].speed)
								ants[ant].x += ants[ant].speed;
							else
								ants[ant].dir = 5;
							if(ants[ant].y >= c.height - ants[ant].height - ants[ant].speed && ants[ant].x >= c.width - ants[ant].width - ants[ant].speed)
								ants[ant].dir = 8;
							break;
						case 5:
							if ( ants[ant].y < c.height - 3 - ants[ant].speed) {
								ants[ant].y += ants[ant].speed;
							} else {
								ants[ant].dir = (Math.floor(Math.random() * 2)) === 0 ? 4 : 6;
							}
							if(ants[ant].x >= c.width - ants[ant].width - ants[ant].speed) {
								ants[ant].dir = (Math.random() * 100 + 1) < 11 ? 6 : 5;
							} else if (ants[ant].x === 1) {
								ants[ant].dir = (Math.random() * 100 + 1) < 11 ? 4 : 5;
							}
							break;
						case 6:
							if( ants[ant].x > ants[ant].speed) {
								ants[ant].x -= ants[ant].speed;
							} else {
								ants[ant].dir = 5;
							}
							if ( ants[ant].y < c.height - 3 - ants[ant].speed) {
								ants[ant].y += ants[ant].speed;
							} else {
								ants[ant].dir = 7;
							}
							if(ants[ant].x <= ants[ant].speed && ants[ant].y >= c.height - 3 - ants[ant].speed) {
								ants[ant].dir = 2;
							}
							break;
						case 7:
							//document.getElementById("w").style.background = 'red';
							if( ants[ant].x > ants[ant].speed) {
								ants[ant].x -= ants[ant].speed;
							} else {
								ants[ant].dir = (Math.floor(Math.random() * 2)) === 0 ? 6 : 8;
							}
							if(ants[ant].y >= c.height - ants[ant].height - ants[ant].speed) {
								ants[ant].dir = (Math.random() * 100 + 1) < 11 ? 8 : 7;
							} else if (ants[ant].y === 1) {
								ants[ant].dir = (Math.random() * 100 + 1) < 11 ? 6 : 7;
							}
							break;
						case 8:
							//document.getElementById("nw").style.background = 'red';
							if( ants[ant].x > ants[ant].speed)
								ants[ant].x -= ants[ant].speed;
							else
								ants[ant].dir = 1;
							if( ants[ant].y > ants[ant].speed) {
								ants[ant].y -= ants[ant].speed;
							} else {
								ants[ant].dir = 7;
							}
							if(ants[ant].x <= ants[ant].speed && ants[ant].y <= ants[ant].speed) {
								ants[ant].dir = 4;
							}			
					}
					if(ants[ant].x > 593 && ants[ant].x < 605 && ants[ant].y > 341 && ants[ant].y < 355) {
						if(ants[ant].hasFood) {
						console.log('brought food home');
						colonyFood++;
						ph += 10;
						$('#ph').html(ph);
						ants[ant].hasFood = false;
						} else if (colonyFood > 0 && ants[ant].energy < 5001) {
							console.log('took some colony food');
							ants[ant].energy += 1000;
							colonyFood --;
						}
						document.getElementById('food').innerHTML = colonyFood;
					}
				}
				ctx.fillStyle = "rgba(255,0,0,0.008)";
				ctx.fillRect(ants[ant].x,ants[ant].y,3,3);
				//ctxo.fillStyle = "rgba(255,0,0,0.008)";
				//ctxo.fillRect(ants[ant].x,ants[ant].y,3,3);
				document.getElementById('debug').innerHTML += "[ x: " + ants[ant].x + ", y: " + ants[ant].y + ", dir: " + ants[ant].dir + " ] ";
			}	
		}
	}
}
	requestAnimationFrame(test)	

};



setInterval(function() {
	if(colonyFood > 20) {
		ants.push(new ant());
		colonyFood -= 3;
		document.getElementById('ants').innerHTML = ants.length;
		console.log('new baby ant!');
	}
}, 2000);


setInterval(function() { 
	var img = ctx.getImageData(0,0, c.width, c.height);
	var food = ctxf.getImageData(0,0, c.width, c.height);
	var numPixels = img.width * img.height;
	var pixels=img.data;
	var foodpixels = food.data;
	for (var i = 0; i < numPixels; i++) {
	    if(img.data[i*4 + 3] > 0)
	    	img.data[i*4 + 3] = img.data[i*4 + 3] - 1;
	    if(food.data[i*4 + 3] > 0)
	    	food.data[(i + 1) *4 + 3] = 255
	}
	ctx.clearRect(0, 0, c.width, c.height);
	ctx.putImageData(img, 0, 0);
}, 30000)



